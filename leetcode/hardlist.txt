@Author: lcy
@Date:   2016-11-10T11:26:07-05:00
@Last modified by:   lcy
@Last modified time: 2016-11-14T21:50:24-05:00

124. Binary Tree Maximum Path Sum
101. Symmetric Tree
Max XOR(set)
wiggle sort 2( O(n), nth_element A(i) nums[(1+2*i)%(n|1)])
327. Count of Range Sum 想不出来，用multiset 先insert 0 ？
343. Integer Break why factors are 3(prefered) and 2
If an optimal product contains a factor f >= 4, then you can replace it
with factors 2 and f-2 without losing optimality, as 2*(f-2) = 2f-4 >= f.
So you never need a factor greater than or equal to 4, meaning you only
need factors 1, 2 and 3 (and 1 is of course wasteful and you'd only use it for n=2 and n=3, where it's needed).
For the rest I agree, 3*3 is simply better than 2*2*2, so you'd never use 2 more than twice.

311. Sparse Matrix Multiplication
存的是非0项的坐标。。。。。。


301. Remove Invalid Parentheses
不用for 循环。。。。直接用idx迭代，(((去掉哪个 情况都是一样的。。。。


114. Flatten Binary Tree to Linked List   QuestionEditorial Solution
感觉智商封顶。。。。怎么办。。。

295. Find Median from Data Stream
用一个大堆， 再用一个小堆。。。。就是记不住。。。智障。。

264. Ugly Number II
有可能会有重复的。。。

341. Flatten Nested List Iterator
用两个stack存begin和end

95. Unique Binary Search Trees II
构造的是binary tree啊啊啊啊。存一个min ，mx

330. Patching Array
如果total 可以覆盖到下一个数减一的话，就不miss，否则就miss这个total+1

207. Course Schedule
用入度保证不会enque两次
还有图里面和degrees里面有可能有的点没存进去，所以要遍历所有点，确保把入度是0的都算进来

281. Zigzag Iterator
可以用queue 存pair，begin和end

276. Paint Fence
You have to paint all the posts such that no more than two adjacent fence posts have the same color.
可以多个两个连着的。。。。

413. Arithmetic Slices
存end在位置i上的个数， total累积

275. H-Index II
典型的二分，但是中间的条件非常纠结，还有最后一种特殊情况

98. Validate Binary Search Tree
典型的树的中遍历，存一个上次结点即可

60. Permutation Sequence
就是这个序数，要先减一

321. Create Maximum Number
非常难写

156. Binary Tree Upside Down
二叉树的遍历，有点不知所措

332. Reconstruct Itinerary   QuestionEditorial Solution
不一定要用set记录是不是visited过了，可以用map<string, int>第二个是零的时候说明这张票用过了
不熟练

145. Binary Tree Postorder Traversal
记录lastnode, 如果top->right == lastnode 就pop栈

377. Combination Sum IV !!!!!!
用backtracking超时
相当于coins！！！

57. Insert Interval
交叉时候的条件判断错了

382. Linked List Random Node
蓄水池，不清楚原来有多大的池子。随机取出来一个或者k个
把第一个当做那个 ，接下来rand()%（2++）, 如果是0则把当前的当做结果

47. Permutations II
backtracking 注意要存visited 先sort！！去重

130. Surrounded Regions
不用判断=0 只要>0 就可以了。。这样才可以过

82.deleteDuplicates
可以用递归。。。

302. Smallest Rectangle Enclosing Black Pixels
二分搜索，还是不太会写

158. Read N Characters Given Read4 II - Call multiple times
不是很会 用一个queue存上次多读出来的东西

305. Number of Islands II
典型的 union find

425. Word Squares
不会。 思路简单

90. Subsets II
先sort！！！

352. Data Stream as Disjoint Intervals
57. Insert Interval
都tm还不会。。。

254. Factor Combinations
数学题还是有点不会

259. 3Sum Smaller
i, j 加起来小于target 那么cnt+=j-i, 小于j的数和i组合都符合条件，i++

267. Palindrome Permutation II
permutation 去重
if(i!=0 && left[i] == left[i-1] && visited[i-1]) continue;

320. Generalized Abbreviation
backtracking 每次要么用这个字，要么不用num++

255. Verify Preorder Sequence in Binary Search Tree
stack 存左边的一直递减，在left subtree里面，
如果大于stack的顶端，那么在right subtree, pop stack更新lower_bound
中间出现cur<lower_bound return false

271. Encode and Decode Strings
string find_first_of
num+"@"+str

310. Minimum Height Trees
结束条件是还剩两个没有visited 或者一个没有visited 不是q的大小。。。

323. Number of Connected Components in an Undirected Graph
刚开始都是孤立的点，每增加一个边 如果root不一样，则减少了一个components

和增加点区别开。。。遍历neigh点。

410. Split Array Largest Sum
二分 思路很巧妙。

456. 132 Pattern

365. Water and Jug Problem
辗转相除法，求最大公约数
353. Design Snake Game
需要再好好看看


317. Shortest Distance from All Buildings
对每个1为起点，算最短距离，注意怎么保证已visit过的删掉。
还有一个和

https://discuss.leetcode.com/topic/52542/c-template-for-all-combination-problem-set
k Sum 1 & 2

coin change
每个可以多次使用，有多少种方法
377. Combination Sum IV （backtracking 超时，dp）
n遍历所有nums 凑够target
dp[i] +=dp[i-n];
39. Combination Sum backtracking 得到所有可能的组合


每个只能用一次，有多少种 40. Combination Sum II backtracking
dp[0][0] = 1;
dp[k][0] = 1;
dp[0][k] = 0;
dp[end][j] = end == 0? j == 0: dp[end-1][j] + ( j-nums[end] >= 0 && dp[end-1][j-nums[end]]);


每个只能用一次，能不能拼成 416. Partition Equal Subset Sum （dp，但是不能重复，每个就用或者不用）
dp[i][target] 用前i个拼target
if i == 0 && j==0 true: false
else dp[i-1][target] || target-nums[i] >= 0 && dp[i-1][target-nums[i]]
dp[end][j] = end == 0? j == 0: dp[end-1][j] ||( j-nums[end] >= 0 && dp[end-1][j-nums[end]]);
